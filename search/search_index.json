{"config":{"lang":["es"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Democratising CANSAT II. The Return","text":"<p>This project of Club Rob\u00f3tica Granada , tries to make the CANSAT project accessible to the greatest number of members of the educational community and/or enthusiasts.</p> <p>The project is a continuation of the previous Democratizando Cansat (contents only in Spanish), and focuses on several aspects that facilitate the project such as:</p> <ul> <li>Easy connection of electronic components, as they can be connected directly to the board without the need for printed circuit boards, soldering, etc.</li> <li>Block-based programming, with compatibility with a large number of devices.</li> <li>Powerful and reliable communications based on LoRa, without the use of directional antennas.</li> <li>Control device with a large number of pins to connect devices and high processing capacity and connectivity.</li> <li>Data processing aids, parachute and satellite structure.</li> </ul> <p> <p></p>"},{"location":"guide/","title":"Didactic guide","text":"<p>The teaching guide consists of the following documents:</p> <ul> <li>Didactic unit</li> <li>Tasks and evaluation criteria</li> <li>Timing of tasks</li> <li>Assessment tools</li> </ul>"},{"location":"media/","title":"Competition Photos and Videos","text":"<p>Photos and Videos Courtesy of Miguel \u00c1ngel Fern\u00e1ndez Rodr\u00edguez</p>"},{"location":"media/#gallery","title":"Gallery","text":""},{"location":"media/#video","title":"Video","text":""},{"location":"more/","title":"More about the CANSAT project","text":"<p>To learn more about the project, or for further information, please refer to the following sources:</p> <ul> <li>CANSAT challenge website (by Esero Spain).</li> <li>Associated resources for the CANSAT challenge (by Esero).</li> <li>CanSat Zero: Introductory activities to the CanSat challenge (by Esero Espa\u00f1a).</li> <li>Democratizando CANSAT (by Club Rob\u00f3tica Granada).</li> </ul>"},{"location":"scr/","title":"Sources","text":"<ul> <li>Arduinoblocks by Juanjo L\u00f3pez.</li> <li>LoRa and LoRaWAN on Arduinoblocks + ESP32 STEAMakers, by Juanjo L\u00f3pez.</li> <li> <p>Examples of Lora projects:</p> <ul> <li>https://domoticaencasa.es/tutorial-esp32-ttgo-lora/</li> <li>https://randomnerdtutorials.com/ttgo-lora32-sx1276-arduino-ide/</li> <li>https://www.electronics-lab.com/project/introduction-lora-send-data-two-arduino-using-lora/</li> </ul> </li> <li> <p>Number processing in arduino and c: http://manueldelgadocrespo.blogspot.com/p/serialprint.html</p> </li> <li>https://youtu.be/BvAGF1CB-9o</li> <li>https://www.youtube.com/playlist?list=PLdsx9TbBHhqfsSrVl0Key9BM9meUgkE5U</li> <li>GPT Chat AI</li> <li>Lora Library: https://github.com/sandeepmistry/arduino-LoRa/blob/master/API.md</li> <li> <p>LoRa Transmission:</p> <ul> <li>https://docs.rakwireless.com/Product-Categories/WisDuo/RAK811-Module/AT-Command-Manual/#lora-p2p-type-at-command</li> <li>Lora and LoraWan video tutorials: https://www.youtube.com/playlist?list=PLmL13yqb6OxdeOi97EvI8QeO8o-PqeQ0g</li> <li>https://www.electrodaddy.com/lorawan-internet-de-las-cosas/#Como_funciona_la_modulacion_LoRa</li> <li>https://lora-panama.com/modulacion-de-lora/</li> <li>http://lora-panama.com/parametros-de-transmision/</li> <li>http://lora-panama.com/impacto-de-los-parametros-de-transmision/</li> </ul> </li> <li> <p>Tracking frequencies in GNU/Linux:</p> <ul> <li>previous: https://sdr-es.com/instalacion-rtlsdr-raspberrypi/</li> <li>software: https://github.com/gqrx-sdr/gqrx/releases</li> </ul> </li> <li> <p>https://www.hostinger.es/tutoriales/que-es-json</p> </li> </ul>"},{"location":"3D/3dcrg/","title":"3D structure by Club Robotica Granada","text":"<p>We offer three models that can be used as a basis for the final design of your CANSAT 3D structure.</p>"},{"location":"3D/3dcrg/#3d-structure-by-pablo-moraga","title":"3D structure by Pablo Moraga","text":"<p>This 3D design of the CANSAT body has been designed at the Club Rob\u00f3tica Granada with the Tinkercad tool. The design is intended to leave as much space inside as possible, housing the ESP32 STEAMakers board with the corresponding sensors and peripherals.</p> <p></p> <p>It consists of the following elements:</p> Part Image BodyIn addition, 4 M2.5 nuts are required for heat pressing and then screwing on covers Electronics trayTo be inserted into the body through the longitudinal groove.Also requires 3 M3x8 screws for fixing ESP32 Top coverAlso requires 2 M2.5x10 screws for body mounting Bottom coverAlso requires 2 M2.5x10 screws for body mounting"},{"location":"3D/3dcrg/#stl-files","title":"STL files","text":"<ul> <li>cansat_body.stl</li> <li>cansat_plate.stl</li> <li>cansat top_cover.stl</li> <li>cansat_bottom_cover.stl</li> </ul>"},{"location":"3D/3dpm/","title":"3D structure by Pablo Moraga","text":"<p>We offer three models that can be used as a basis for the final design of your CANSAT 3D structure.</p>"},{"location":"3D/3dpm/#3d-structure-by-pablo-moraga","title":"3D structure by Pablo Moraga","text":"<p>This CANSAT 3D case design was created by Pablo Moraga using the Tinkercad tool. It is a perforated body design with a hole for a power bank button, with threaded caps and a top cover with a GPS antenna housing. The top cover is also designed to house the parachute cords.</p> <p>It consists of the following parts:</p> Part Image Body Top coverGPS (Standard and Keyestudio models) Bottom cover"},{"location":"3D/3dpm/#stl-files","title":"STL files","text":"<ul> <li>CansatStructure.stl</li> <li>Cansat_GPS_cover.stl</li> <li>Cansat_GPS_2.stl</li> <li>Cansat_Flat_Cover.stl</li> </ul>"},{"location":"3D/3dv/","title":"3D structure by VegaSteam","text":"<p>We offer three models that can be used as a basis for the final design of your CANSAT 3D structure.</p>"},{"location":"3D/3dv/#3d-structure-by-vegasteam","title":"3D structure by VegaSteam","text":"<p>The 3D structure of the CANSAT (satellite) transmitter of the democratising Cansat proposal is based on a design by David Morales Arellano, a member of the VegaSteam team at the IES Federico Garc\u00eda Lorca de Churriana de la Vega (Granada).</p> <p>It has been designed for easy assembly and replacement of electronic components.</p> Part Image Electronics BayIt is used to house the lora device and its associated electronics Airframe or external coversCANSAT perimeter enclosure Top and bottom caps"},{"location":"3D/3dv/#stl-files","title":"STL files","text":"<ul> <li>CRG_Bay.stl</li> <li>CRG_Airframe.stl</li> <li>CRG_cap1.stl</li> <li>CRG_cap2.stl</li> </ul>"},{"location":"ControlSystems/ab/","title":"Arduinoblocks software","text":"<p>Any programmed control system needs an environment to execute the control program, in our case Arduinoblocks, a graphical programming environment that we will use to program the ESP32 STEAMakers. This environment has been developed by Juanjo L\u00f3pez and is available online. You need to have a registered account on the Arduinoblocks website and the Arduinoblocks Connector program running on your computer to establish the connection between the online environment and the board.</p> <p></p>"},{"location":"ControlSystems/ab/#arduinoblocks-task","title":"Arduinoblocks task","text":"<p>Install or locate the arduinoblocks connector software on your computer, and register an account on the arduinoblocks web service.</p> Help (Spanish) <ul> <li>Arduinoblocks Connector</li> <li>Full Arduinoblocks documentation</li> <li>Arduinoblocks FreeBook</li> <li>Arduinoblocks youtube channel</li> </ul>"},{"location":"ControlSystems/bmp/","title":"BMP280. Connection and task","text":""},{"location":"ControlSystems/bmp/#bmp280-sensor","title":"BMP280 Sensor","text":"<p>This sensor gives us barometric pressure, altitude (thanks to the pressure) and temperature. It is connected through the I2C bus port, in our case we will connect it to one of the 4 I2C plugs on the board. To know more about this sensor we can see its description in the Keyestudio wiki.</p> <p></p>"},{"location":"ControlSystems/bmp/#wiring","title":"Wiring","text":"<p>In our case, just connect the GND, VIN, SDA and SCL pins to their corresponding pins on any of the male I2C ports (4) on the board.</p> <p></p>"},{"location":"ControlSystems/bmp/#task-to-measure-pressure-altitude-and-temperature","title":"Task. To measure pressure, altitude and temperature","text":"<p>It correctly connects the LED display to the BMP280 sensor and displays the pressure (millibars), altitude (metres) and temperature (\u00b0C) values every second in a clear and orderly manner on the display.</p> Help <p>Code</p> <p></p>"},{"location":"ControlSystems/cs/","title":"Control systems","text":""},{"location":"ControlSystems/cs/#definition","title":"Definition","text":"<p>An automatic control system or automatism is a set of technical elements that together are capable of performing a series of actions to solve a problem without human intervention.</p> <p>The ones we are going to use in our course are programmed, which means that the automatism will work depending on a programme that we will tailor to the function to be carried out.</p> <p>In our case, we are going to create a sensor data transmitter, which will be our satellite, and a data receiver and plotter located on the ground.</p> <p></p>"},{"location":"ControlSystems/cs/#elements","title":"Elements","text":"<p>Our control system will basically contain three blocks of devices:</p> <p></p> <ul> <li>Process or control elements: these are the ones that are going to be programmed, they will receive data from the input elements to decide what to do with the output elements. In our case it is ESP32 STEAMakers.</li> </ul> <p></p> <ul> <li>Input elements: they will be sensors that can be connected to our control system, they can be: pushbuttons, switches, limit switches, ntc, ldr, accelerometers, gyroscopes, barometers, gps, etc.</li> <li>Output elements: these will be the actuators, which our programme will decide to start and stop, such as: LEDs, buzzers, motors, screens, etc.</li> </ul> <p></p>"},{"location":"ControlSystems/cs/#types","title":"Types","text":"<p>Open Loop</p> <p>There is no feedback, which means that the controller gives a start command to the actuators without the signal from the sensors (input elements) being monitored at any time.</p> <p></p> <p>Closed Loop</p> <p>There is feedback, which means that the control system is always monitoring the sensors (input elements) to perform one action or another depending on the state of the sensors.</p> <p></p>"},{"location":"ControlSystems/csvdat/","title":"Programmes using CSV data","text":""},{"location":"ControlSystems/csvdat/#transmitting-programme","title":"Transmitting programme","text":"<p>Code</p> <p></p>"},{"location":"ControlSystems/csvdat/#receiving-programme","title":"Receiving programme","text":"<p>Code</p> <p></p>"},{"location":"ControlSystems/data_proc_ab/","title":"Data processing with arduinoblocks","text":"<p>To process the data received from the receiver on the computer, we have previously sent the data (sender program) in JSON format via LoRa communication. To process it on the computer, we need to collect it on the board or receive it via LoRa in JSON format, analyse it and extract it by assigning it to variables that will be sent to the computer via the serial port (USB serial communication), plotted in real time and then saved in CSV format.</p> <p>The programme we need to do this adds serial communication and graphing to the previous JSON reception programme. The following figure shows the most common serial communication tools used in Arduinoblocks.</p> <p></p> <p>Program for receiving data in JSON format and graphing:</p> <p>In this programme we use a function called 'plott', which uses the 'Plotter' block, which is used to plot data from serial communication between data on the board that is sent to the computer.</p> <p></p> <p>The following video documents real-time graphing and CSV data extraction:</p> <p>https://youtu.be/2hBiAoo6d0M</p>"},{"location":"ControlSystems/dht/","title":"DHT22. Connection and task","text":""},{"location":"ControlSystems/dht/#dht22-sensor","title":"DHT22 Sensor","text":"<p>The DHT22 digital sensor can provide temperature and humidity. It is connected to a digital pin, in our case we have chosen D3 (IO25) of our board. To know more about this sensor we can see its description in the Keyestudio wiki.</p> <p></p>"},{"location":"ControlSystems/dht/#wiring","title":"Wiring","text":"<p>The DHT22 sensor is connected to a digital pin, in our case we have chosen D3 (IO25) on our board. We connect the S of the sensor to the S of pin D3 (IO25) of the board, the + of the sensor to the V of the board and the - of the sensor to the G of the board.</p> <p></p>"},{"location":"ControlSystems/dht/#task-temperature-and-humidity-measurement","title":"Task. Temperature and humidity measurement","text":"<p>It correctly connects the LED display to the DHT22 sensor and displays the temperature and humidity values every second in a legible and orderly manner.</p> Help <p>Code</p> <p></p>"},{"location":"ControlSystems/first_lora_comm/","title":"First LoRa communication","text":""},{"location":"ControlSystems/first_lora_comm/#challenge-solved-first-communication-with-lora","title":"Challenge solved: first communication with LoRa","text":"<p>This is a transmitter consisting of an ESP32 STEAMakers with LoRa module, an oled screen and a BMP280 sensor. It must collect time, pressure, altitude and temperature data, display it on the transmitter screen and transmit it to the receiver, which consists of ESP32 STEAMakers with LoRa module. The frequency of these operations is every second.</p> <p>The receiver is connected to the PC via USB using serial communication, and the data received is displayed and plotted on the PC in real time.</p> <p></p>"},{"location":"ControlSystems/giro/","title":"MPU6050. Connection and task","text":""},{"location":"ControlSystems/giro/#mpu6050-sensor","title":"MPU6050 Sensor","text":"<p>The MPU6050 sensor is an accelerometer and gyroscope that can provide acceleration and tilt in the three axes of space. It is connected via an I2C bus port to one of the 4 ports with male pins on the board. To know more about this sensor we can see its description in the Keyestudio wiki.</p> <p></p>"},{"location":"ControlSystems/giro/#wiring","title":"Wiring","text":"<p>In our case, simply connect the GND, VCC, SDA and SCL pins to the corresponding pins on one of the male I2C connectors (4) on the board.</p> <p></p>"},{"location":"ControlSystems/giro/#task-measurement-of-accelerations","title":"Task. Measurement of accelerations","text":"<p>It correctly connects the OLED display to the MPU6050 sensor and displays the acceleration values in all three axes every second in a readable and orderly manner on the display.</p> Help <p>Code</p> <p></p>"},{"location":"ControlSystems/gps/","title":"GPS. Connection and task","text":""},{"location":"ControlSystems/gps/#gps","title":"GPS","text":"<p>The GPS (Global Positioning System) is a device that allows us to determine our position on planet Earth by communicating with satellites. Specifically, we have the GPS6MV2 model, based on the UBLOX NEO 6M receiver chip. It communicates with the board via a serial port. To know more about this sensor we can see its description in the Keyestudio wiki.</p> <p></p>"},{"location":"ControlSystems/gps/#wiring","title":"Wiring","text":"<p>The GPS is connected to a serial port on our board, specifically the ESP32 STEAMakers has two serial ports, 1 (pin RX D0, pin TX D1) and 2 (pin RX2 D5, pin TX2 D4). Specifically, we will connect to serial port 2, as port 1 is used for communication with the computer, and for example to load programs from the computer to the board. We will connect the RX pin of the GPS to the TX2 pin (D4 IO17) of the board, and the TX pin of the GPS to the RX2 pin (D5 IO16) of the board. The Vcc (+) of the GPS is connected to the + of the board (V) and the GND (-) of the GPS is connected to the - of the board (G).</p> <p></p>"},{"location":"ControlSystems/gps/#task-gps-positioning","title":"Task. GPS positioning","text":"<p>It correctly connects the OLED screen to the GPS and displays the values of latitude, longitude and altitude on the screen every second in a legible and ordered manner. Latitude and longitude with 6 decimal places and altitude with 2 decimal places. By default, the numerical variables, when displayed directly on the screen, offer only two decimal places.</p> Help <p>Code</p> <p></p>"},{"location":"ControlSystems/jsondat/","title":"JSON data programs (recommended)","text":""},{"location":"ControlSystems/jsondat/#json-format","title":"JSON format","text":"<p>JSON (JavaScript Object Notation) is a structured format for storing and exchanging information, mostly used in client server communications.</p> <p>There are two fundamental elements in a JSON object: Keys and Values.</p> <ul> <li>Keys must be strings. They contain a sequence of characters, they start and end with quotes, they are the header or identification of the data I want to record.</li> <li>Values are a valid JSON data type. It can be in the form of array, object, string, boolean, number or null. They are separated from their Keys pair by a colon (:).</li> </ul> <p>A JSON object begins and ends with braces {}, and consists of key/value pairs, separated by a comma. In addition, each key is followed by a colon that separates it from the value.</p> <p>The syntax of a JSON object if the values are numeric would be:</p> <p>{\u201ckey\u201d:value, \u201ckey\u201d:value, \u201ckey\u201d:value}</p> <p>In the case of our example below what we do is to send and receive the numeric values of pressure, altitude and temperature from sender to receiver, in JSON format.</p> <p>Each data frame could look something like the following example:</p> <p>{\u201cpressure\u201d:948.05,\u201caltitude\u201d:550.55,\u201ctemperature\u201d:22.99}</p>"},{"location":"ControlSystems/jsondat/#lora-json-emitter","title":"LoRa JSON Emitter","text":"<p>This program sends the time (s), pressure (mb), altitude (m) and temperature (\u00baC) information to a LoRa receiver every second via LoRa in JSON text format.</p> <p>Code</p> <p></p>"},{"location":"ControlSystems/jsondat/#lora-json-receiver","title":"LoRa JSON Receiver","text":"<p>We will connect an OLED screen to the receiver, because with the JSON format we can easily extract and separate the information to display on the screen.</p> <p>The following program receives the data via LoRa from the previous sender, parses the JSON data and, if it is correct, assigns it to variables and displays it on the OLED screen.</p> <p>Code</p> <p></p>"},{"location":"ControlSystems/jsondat/#for-more-information","title":"For more information","text":"<p>Basic parsing of JSON data on arduinoblocks, by Juanjo L\u00f3pez. (Spanish content).</p>"},{"location":"ControlSystems/lora/","title":"LoRa Module - LoRa Commands, Connection and task","text":""},{"location":"ControlSystems/lora/#lora-lorawan-module-lora-communications","title":"Lora - LoRaWan module. LoRa Communications","text":"<p>LoRa modules can send and receive LoRa (LongRange) signals. LoRa is a patented communications technology designed to provide low power, long range and good interference immunity, making it ideal for IoT applications.</p> <p></p>"},{"location":"ControlSystems/lora/#lora-commands-on-arduinoblocks","title":"LoRa commands on arduinoblocks","text":"<p>\\(\\triangleright\\) To initialise the LoRa device in Arduino blocks, we need to use the following block in the 'Initialise' structure of our program. In this block we can configure two parameters:</p> <ul> <li>Frequency (MHz): the operating frequencies vary from country to country and are usually the 433MHz, 868MHz and 915MHz bands. In our case, 868 MHz.</li> </ul> <ul> <li>Encryption word of 16 characters: it can be used or not, it is used to protect our data sent through an encryption process. In order for communication to take place between the transmitter and receiver, they must have the same encryption word.</li> </ul> <ul> <li>With regard to the configuration of the connection pins, you do not need to touch the standard ones if you connect them as indicated in the following section (direct connection to the female pins on the board).</li> </ul> <p>\\(\\triangleright\\) Sends a data frame. The maximum length of data to be sent varies between 51 and 242 bytes (characters). It depends on the frequency used (868 MHz in our case), the bandwidth used (125000 Hz by default) and the SF (Spreading Factor) used (7 by default). Therefore, by default, it can send a maximum of 242 bytes (characters).</p> <p></p> <p>\\(\\triangleright\\) Event triggered when data is received via LoRa.</p> <p></p> <p>\\(\\triangleright\\) Within the previous event, it returns the character frame that was sent to us. If we assign it to a variable, it must be a text variable.</p> <p></p> <p>\\(\\triangleright\\) Within the above event, it returns the received signal strength. If we assign the value to a variable, it must be numeric.</p> <p></p>"},{"location":"ControlSystems/lora/#wiring","title":"Wiring","text":"<p>The LoRa module is connected directly to the ESP32 STEAMakers board between the top 5V pin and digital pin 6 (D6 / IO27). The 5V socket on the board must be matched to the VCC pin of the LoRa module, as shown in the schematic. The connection of this module is SPI type (it uses the SPI port on the board).</p> <p></p>"},{"location":"ControlSystems/lora/#task-connection-for-first-lora-communication","title":"Task. Connection for first LoRa communication","text":"<p>Connect the LED display, the BMP280 sensor and the LoRa module to the transmitter board correctly. Connect the LoRa module to the receiver board correctly. This wiring will be useful for the next exercise of communication between the boards.</p> Help <p>Transmitter wiring:</p> <p></p> <p>Receiver wiring:</p> <p></p>"},{"location":"ControlSystems/lora/#for-more-information","title":"For more information","text":"<p>LoRa y LoRaWAN en Arduinoblocks + ESP32 STEAMakers, by Juanjo L\u00f3pez. (Spanish content)</p>"},{"location":"ControlSystems/morelora/","title":"More about LoRa P2P communications","text":""},{"location":"ControlSystems/morelora/#lora-signal-type","title":"LoRa. Signal type","text":"<p>LoRa is a patented communication technology designed to provide low power, long range and good immunity to interference, making it ideal for IoT applications. The LoRa communication system is based on CSS (Chirp Spread Spectrum) modulation, a wideband modulation technique that uses chirps to encode information. The chirps are like one-tone beeps whose frequency increases or decreases linearly with time over the used bandwidth (BW), symmetrically to the centre frequency, and each chirp represents a symbol that can have 2F values, where F is the Spread Factor. In the LoRa system, data packets are transmitted and these data packets consist of</p> <ul> <li>A preamble consisting of a number of variable chirps and a sync word. On reception, the received preamble is checked to see if it matches the programmed preamble, and if it does not, the rest of the message is discarded.</li> <li>Header, which can be explicit or implicit and, in the case of an explicit header, contains information on the number of data to be sent, the error coding rate and the presence of an error check code.</li> <li>Payload, which is the net information to be transmitted. In Lora the maximum number is 255 bytes (characters).</li> </ul>"},{"location":"ControlSystems/morelora/#lora-p2p-transmission-parameters","title":"LoRa P2P transmission parameters","text":"<p>Initialisation of the LoRa module</p> <p>When we initialise the LoRa module with the initialisation block, for a given central frequency (in our case 868 MHz), it sets a series of default parameters, which are as follows:</p> <p></p> <ul> <li>Frequency = 868 MHz</li> <li>TxPower =17</li> <li>SpreadingFactor= 7</li> <li>Bandwith= 125000 Hz</li> <li>CodingRate= 5</li> <li>PreambleLength= 8</li> <li>SyncWord= 0x12</li> <li>Gain = 0 (auto)</li> <li>EnableCRC= disable</li> </ul> <p></p> <p>In the program we can modify any of these parameters with the following arduinoblocks related to the modification of our LoRa transmission:</p> <p>TX Power</p> <p>Defines the decibel (dB) transmission power of our LoRa device. We can give values between 2 and 20 decibels (dB), default 17 dB.</p> <p>Frequency. Frequency (Carrier)</p> <p>Defines the carrier frequency of the medium used for both transmission and reception. It also depends on the operating region: in Europe, the LoRa operating carrier frequency is the EU ISM band 863-870MHz. In our case it is 868 MHz by default. We can change to non-integer values, as shown in the configuration example in the picture.</p> <p>BandWidth</p> <p>It represents the width of LoRa radio frequency signals, it is actually a frequency range that oscillates with respect to the base frequency where the highest signal power is concentrated, which is used for data transmission. It is usually set at 125 kHz, but can be increased up to 250 kHz or even 500 kHz in some regions for particular modulation parameters.</p> <p>A higher bandwidth provides a higher data rate (hence shorter time on air), but a lower sensitivity (due to additional noise integration).</p> <p>A lower bandwidth provides a higher sensitivity, but a lower data rate.</p> <p>The default bandwidth is 125 KHz, but can be given the following range of values: 7.8 KHz, 10.4 KHz, 15.6 KHz, 20.8 KHz, 31.25 KHz, 41.7 KHz, 62.5 KHz, 125 KHz, 250 KHz, and 500 KHz.</p> <p>Spreading Factor (SF) or Spread Factor</p> <p>This is the chirp spread parameter* which determines how many chirps are sent per second. It has a default value of 7, but can be set to any value between 6 and 12. In detail, a high SF increases the symbol airtime (data to be transmitted) and the power consumption, thus improving the communication range but reducing the available data rate and the size of the message payload.</p> <p>Each increase in the Spread Factor (SF) halves the data rate and therefore doubles the transmission time and ultimately the power consumption.</p> <p>The lower the SF, the higher the data rate and the shorter the range; the higher the SF, the lower the data rate and the longer the range. The range is also highly dependent on the environment and any structures or obstacles in the way.</p> <p>*(Chirp): are frequency pulses (ascending or descending) whose sequence is used to send symbols (data).</p> <p></p> <p>Coding Rate</p> <p>This is the Forward Error Correction (FEC) ratio used by LoRa. FEC is the process where error correction bits are added to the transmitted data. The Code Ratio refers to the ratio of transmitted bits that actually carry information to the total. LoRa allows the following values: \\(CR = \\left\\{\\frac{4}{5},\\frac{4}{6},\\frac{4}{7},\\frac{4}{8}\\right\\}\\) which are calculated as follows: \\(CR = \\frac{4}{4+CR}\\) where \\(CR = \\left\\{1,2,3,4\\right\\}\\).</p> <p>It takes a default value of 5, but can be given a range of values between 5 and 8.</p> <p>Preamble Length</p> <p>They are a number of symbols sent at the beginning of each LoRa data transmission, their default value is 8, but they can be given a range between 6 and 65535 symbols.</p> <p>Sync word</p> <p>Sets the sync word of the LoRa radio communication. It is a hexadecimal byte whose default value is 0x12, and can take a range of values between 0 and 0xFF.</p> <p>Gain</p> <p>Sets the LNA gain for best RX sensitivity; by default, AGC (automatic gain control) is used and LNA gain is not used. Values from 0 (automatic gain) to 6. Default 0.</p> <p>CRC</p> <p>Cyclic Redundancy Check (CRC) is an error detection code often used in digital networks and storage devices to detect accidental changes to data. It checks arithmetically that the data received matches the data sent. CRC is by default disabled and can be enabled or disabled.</p>"},{"location":"ControlSystems/morelora/#efficient-communication-between-lora-devices","title":"Efficient communication between LoRa devices","text":"<p>In order to establish a point-to-point communication between two LoRa devices, all these requirements must be met:</p> <ul> <li> <p>That they work with the same values simultaneously of:</p> <ul> <li>Frequency.</li> <li>Bandwidth.</li> <li>Coding Rate.</li> <li>Spreading Factor.</li> <li>Preamble Length.</li> <li>Sync Word.</li> <li>CRC have it the same (on or off).</li> <li>If the information is encrypted, same encryption word.</li> </ul> </li> </ul>"},{"location":"ControlSystems/now/","title":"Now CANSAT","text":""},{"location":"ControlSystems/now/#final-task-wiring","title":"Final task wiring","text":"<p>Mount the transmitter, which consists of an ESP32 STEAMaker with LoRa module, OLED display, BMP280 sensor, MPU6050 sensor, DHT22 sensor and GPS, and the receiver, which consists of an ESP32 STEAMaker with LoRa module.</p> Help <p>Emitter scheme:</p> <p>In the transmitter, we can dispense with the display if we wish, as it will only be of use in testing and not in a real launch.</p> <p></p> <p>Receiver scheme:</p> <p></p>"},{"location":"ControlSystems/now/#final-task-programmes-with-data-in-json-format-recommended","title":"Final task programmes with data in JSON format (recommended)","text":"<p>We have a transmitter consisting of an ESP32 STEAMakers with LoRa module, LED display, BMP280 sensor, MPU6050 sensor, DHT22 sensor and GPS. It should collect and send the following data every second: elapsed time, latitude, longitude, altitude (bmp280), pressure, temperature (bmp280), humidity and z-axis acceleration. The receiver, consisting of ESP32 STEAMakers with LoRa module and 0.96' OLED screen, is connected to the PC via USB and performs a serial communication, displaying and plotting in real time on the PC the data received from the Arduino blocks. Both the transmitter and the receiver store the data in CSV format on microSD.</p> <p>In this case, the data sent and received are encoded in JSON format, so that we can easily extract and separate the information on reception to display it on the screen.</p> Help <p>Emitter code:</p> <p>In the transmitter we can dispense with the screen if we wish, and we can therefore deactivate the 'sendScreen' function, as it is only useful for testing and not for a real start.</p> <p></p> <p>Receiver code:</p> <p></p>"},{"location":"ControlSystems/now/#final-task-programmes-with-data-in-csv-format","title":"Final task programmes with data in CSV format","text":"<p>We have a transmitter consisting of an ESP32 STEAMakers with LoRa module, LED display, BMP280 sensor, MPU6050 sensor, DHT22 sensor and GPS. It should collect and send the following data every second: elapsed time, latitude, longitude, altitude (bmp280), pressure, temperature (bmp280), humidity and z-axis acceleration. The receiver consists of ESP32 STEAMakers with LoRa module and is connected to the PC via USB, performing serial communication and displaying and plotting the received data on the PC in real time. Both the transmitter and the receiver store the data in CSV format on microSD.</p> <p>In this case, the transmit and receive data are encoded in CSV format.</p> Help <p>Emitter code:</p> <p>In the transmitter we can dispense with the screen if we wish, and we can therefore deactivate the 'sendScreen' function, as it is only useful for testing and not for a real start.</p> <p></p> <p>Receiver code:</p> <p></p>"},{"location":"ControlSystems/oled/","title":"OLED display. Connection and task","text":""},{"location":"ControlSystems/oled/#oled-display","title":"OLED display","text":"<p>The OLED screen we are using has a diagonal of 0.96\u2019 and a pixel resolution of 128x64. It uses the I2C serial bus connections, which on the ESP32 STEAMakers board have 5 I2C connections, 4 male and 1 female, the latter is where we connect the OLED screen. To know more about this sensor we can see its description in the Keyestudio wiki.</p> <p></p>"},{"location":"ControlSystems/oled/#wiring","title":"Wiring","text":"<p>The pins of the oled display are connected directly to the female I2C port of the board.</p> <p></p>"},{"location":"ControlSystems/oled/#oled-task","title":"OLED Task","text":"<p>Connect the OLED display correctly to the control board and display the time that has elapsed since the system was switched on. Do this at one-second intervals.</p> Help <p>Code</p> <p></p>"},{"location":"ControlSystems/parts/","title":"CANSAT parts","text":"<p>These are the essential elements that make up our control system in order to fulfil CANSAT's primary mission:</p> <p> Component Image Description ESP32 StEAMakers ControllerESP32 SteaMakers manufactured by keyestudio, with an arduino form factor and accessories such as pin header, microSD, integrated power sensors, programmable with arduinoblocks and with extensive documentation available. Two will be used, one as a transmitter (on the satellite) and one as a receiver on the ground computer. BMP280 Sensorbarometric sensor giving pressure, altitude and temperature DHT22 Sensordigital sensor providing temperature and humidity GPS Peripheralprovides us with longitude, latitude, altitude, speed, date, exact time, etc. MPU6050 Sensoraccelerometer and gyroscope. Gives accelerations and inclinations on three axes. 0.96\u201d OLED display Actuator0.96\u2019 128x64 pixel oled graphic display LoRa - LoRaWan module Communication peripheralused to establish LoRa (Long Range) communications. <p></p>"},{"location":"ControlSystems/power/","title":"Power and consumption","text":""},{"location":"ControlSystems/power/#power","title":"Power","text":"<p>To power our CANSAT transmitter we will use a power bank which will supply power to our CANSAT transmitter via the USB B port (printer type) of our ESP32 STEAMakers. In order to meet the requirement of switching our CANSAT transmitter on and off from an external button or switch, it is recommended to use a power bank with a switch on/off.</p> <p></p>"},{"location":"ControlSystems/power/#integrated-sensors-energy-sensor","title":"Integrated sensors. Energy Sensor","text":"<p>The ESP32 STEAMakers board has built-in sensors, including energy sensors. This special sensor can measure current (A), voltage (V), power (W) and energy (Wh) through Arduino blocks.</p> <p></p>"},{"location":"ControlSystems/power/#battery-life-calculation","title":"Battery life calculation","text":"<p>We must first measure the power requirement of the CANSAT transmitter and then calculate the duration of the power supply or battery. Like \\(Power = \\frac{Energy}{Time}\\), knowing the energy that the battery can store and the power required by the CANSAT transmitter, we can know the battery life.</p> <p>\\(Time = \\frac{Energy}{Power}\\)</p> <p>Units of energy stored in a battery:</p> <ul> <li>1 watt hour (w.h.): if a 1 watt device is connected to the battery, it can power it for 1 hour. This is the device to use.</li> <li>1 milliAmpere.hour (mA.h): it is convenient to convert it to W.h, for this we need to know the voltage of the battery, to calculate the electrical power (\\(Power = Voltage \\cdot Intensity\\)), to later calculate the energy (\\(Energy = Power \\cdot Time\\)), expressing the energy in W.h. For example, a battery with a voltage of 3.78V and 11300mA.h has an energy of \\(E = V \\cdot I \\cdot t = 3.78V \\cdot 11.3A \\cdot 1h = 42.71 W \\cdot h\\). Then a device of 1W power could be connected 42.71 horas \\(Time = \\frac{Energy}{Power} = \\frac{42.71 W \\cdot h}{1 W} = 42.71 h\\)</li> </ul>"},{"location":"ControlSystems/power/#power-measurement-and-battery-life-calculation","title":"Power measurement and battery life calculation","text":"<p>Add the necessary code to display the power (on screen or serial port) in your CANSAT programme.Remember that all the elements must be connected and working.If you have a GPS, it must work and give us the position.</p> <p>Once the power is obtained, calculate the time in hours that the system can work, knowing the capacity of your battery in mA.h and its operating voltage.</p> My case resolution <p>In my case, with the attached code, the OLED screen shows me the power in W, giving me a value of 1W. As my battery has a capacity of 2500 mA.h at 3.7V, its energy is:</p> <p>\\(Energy = Power \\cdot time = Voltage \\cdot Intensity \\cdot time\\)</p> <p>\\(Energy = 3.7V \\cdot 2.5 A \\cdot h = 9.25 W \\cdot h\\)</p> <p>To calculate the life of the battery:</p> <p>\\(Time = \\frac{Energy}{Power} = \\frac{9.25 W \\cdot h}{1 W} = 9.25 h\\)</p> <p>Code:</p> <p></p>"},{"location":"ControlSystems/procc_csv/","title":"Processing csv data","text":""},{"location":"ControlSystems/procc_csv/#computer-data-processing","title":"Computer data processing","text":"<p>Once the board with its LoRa receiver is sending data to the PC, the PC must have a serial port reader program that allows to save the data to a file, for this task in GNU/Linux we propose to use Serial Port Terminal (GTKTerm). We will also use a real time plotter called KST, which will collect the data from the file recorded by gtkterm and plot it in real time.</p> <p>The whole process is explained in the following video (Spanish content):</p> <p>Alternatively, for computers with Windows operating systems, we can use the Putty programme for serial port readings (on Windows com), and for real-time graphing we can also use KST, since it is a multi-platform programme with versions for GNU/Linux, Windows and Mac OSX.</p>"},{"location":"ControlSystems/procc_csv/#spreadsheet-data-processing","title":"Spreadsheet data processing","text":"<p>The file recorded on the PC via serial communication (via USB) with the LoRa receiver board, or the file stored on the LoRa transmitter's microSD card with the transmitted data, can be analysed and graphed with a spreadsheet, as shown in the following video (Spanish content).</p>"},{"location":"ControlSystems/sm/","title":"ESP32 SteaMakers. Control element","text":"<p>In our case we will use an ESP32 Steamakers programmable microcontroller board as the control element for several reasons:</p> <p></p> <ul> <li>ESP32 based which means, processing power, wifi and bluetooth connectivity, etc.</li> <li>Arduino form factor and compatibility with Arduino shields.</li> <li>Easy connection. Male pinout available for the board ports, so connection can be done without breadboard.</li> <li>Built-in sensors: power, temperature and magnetic field.</li> <li>Built-in microSD card reader.</li> <li>Arduinoblocks is fully compatible with it, designed for all its functionalities.</li> <li>Detailed technical documentation.</li> <li>Extensive didactic documentation.</li> <li>Quality construction and manufacturer support.</li> <li>Designed in Spain by teachers for teaching purposes.</li> <li>Several distributors in Spain.</li> </ul>"},{"location":"ControlSystems/sm/#technical-specifications-and-pinout","title":"Technical specifications and pinout","text":"<p>The most important features of this board are:</p> <p></p> <ul> <li>Tensilica Xtensa 32-bit LX6 160MHz microcontroller.</li> <li>Wifi 802.11 b/g/n/e/i connectivity.</li> <li>Bluetooth 4.2 connectivity and BLE mode.</li> <li>\u00b5SD card socket.</li> <li>14 powered digital inputs and outputs.</li> <li>Powered female serial connector.</li> <li>I2C connector to connect up to 5 devices at the same time on the same board.</li> <li>I2C female connector for connection of an OLED display.</li> <li>Reset button.</li> <li>5V connector.</li> <li>3.3V connector.</li> </ul> <p></p> <ul> <li>Selectable 3.3-5V switch to switch between these two voltages on some power supply pins.</li> <li>Analogue inputs and outputs.</li> <li>Integrated Hall and temperature sensor.</li> <li>Two 8-bit Digital-to-Analog converters (DACs).</li> <li>Sixteen 12-bit Analogue-to-Digital converters (ADC).</li> <li>16 PWM channels.</li> <li>2 UART.</li> <li>2 I2C channels.</li> <li>4 SPI channels.</li> <li>448Kb ROM.</li> <li>520KB SRAM.</li> <li>8KB+8KB SRAM in RTC.</li> <li>1kbit eFUSE.</li> <li>512 bytes Flash Memory (EEPROM).</li> <li>10 touch sensors.</li> <li>4 internal 64-bit timers.</li> </ul>"},{"location":"ControlSystems/sm/#to-learn-more-about-esp32-steamakers","title":"To learn more about ESP32 STEAMakers","text":"<p>Here is a list of resources in Spanish to learn how to work with the board and get the most out of it:</p> <ul> <li>Documentation and programming manual</li> <li>Notes on ESP32 STEAMakers (by Federico Coca)</li> <li>Control programmed with ESP32 Steamaker + TDR-Steam + Arduinoblocks (focused on IoT), (by Pedro Ruiz)</li> </ul>"},{"location":"ControlSystems/wiring/","title":"Wiring","text":""},{"location":"ControlSystems/wiring/#emitter","title":"Emitter","text":"<p>We connect all the elements in accordance with the description above for each of the elements.</p> <p></p>"},{"location":"ControlSystems/wiring/#receiver","title":"Receiver","text":""},{"location":"Miscelanea/credits/","title":"Credits","text":"<p>The original documentation has been developed by Pedro Ruiz, being tested and put into practice by Jos\u00e9 Luis Bueno and several CANSAT teams with which the Granada Robotics Club collaborates.</p> <p>This website is a translation and adaptation of the original by Federico Coca.</p> <ul> <li>Arduinoblocks: software on which the whole project is based, with improvements developed by Juanjo L\u00f3pez.</li> <li>Corrections and extension of documentation on LoRa communications by Jose Mar\u00eda Fern\u00e1ndez.</li> <li>Calculation of hemispherical parachute design based on the information provided by Pepe Alcaide.</li> <li>Design of 3D structure of CANSAT transmitter by David Morales Arellano, member of the CANSAT team \u2018VegaSteam\u2019 of the IES Federico Garc\u00eda Lorca de Churriana de la Vega (Granada).</li> <li>Design of the 3D structure of the CANSAT transmitter by Pablo Moraga.</li> <li>Poster \u2018Democratizing CANSAT II\u2019 by Pablo Moraga.</li> </ul>"},{"location":"Miscelanea/credits/#poster-democratizing-cansat-ii","title":"Poster \u2018Democratizing CANSAT II\u2019","text":"<p>by: Pablo Moraga</p> <p>Poster Democratizing CANSAT II. The Return</p>"},{"location":"Miscelanea/lic/","title":"Licence","text":"<ul> <li>Creative Commons Atribuci\u00f3n-CompartirIgual 4.0 International (\"CC BY-SA\"). CC BY-SA 4.0 </li> </ul> <p> <p> </p> <p></p>"},{"location":"Parachute/Parachute/","title":"Parachute","text":"<p>The parachute is hemispherical in shape. This shape was chosen because the calculation and development of the construction parts are simpler than other solutions. Moreover, the efficiency of the parachute has been demonstrated.</p>"},{"location":"Parachute/gores/","title":"Gores layout (parts)","text":""},{"location":"Parachute/gores/#by-spreadsheet","title":"By spreadsheet","text":"<p>A spreadsheet has been created to calculate the shape and dimensions of the gores (sections or segments) of our parachute, depending on the radius chosen and the number of sections (gores).</p> <p>The following mathematical expressions have been used to calculate the coordinates for the X and Y positions of the gores:</p> <p>\\(x = \\alpha (angle) \\cdot radius\\), x position of the gore points.</p> <p>\\(y = \\frac{2 \\pi \\cdot radius \\cdot cos \\alpha}{2 \\cdot no. ~ of ~gores}\\), y position of the gore points (there are two symmetrical positive and negative positions).</p> <p>Example with parachute radius 15 cm and 6 gores:</p> <p>Spreadsheet. Gore coordinates.</p> <p></p> <p>Spreadsheet. Representation of gore.</p> <p></p> <p>Image with 8 gores:</p> <p></p>"},{"location":"Parachute/gores/#spreadsheet","title":"Spreadsheet","text":"<ul> <li>parachute_calculation.ods</li> </ul>"},{"location":"Parachute/gores/#via-web","title":"Via web","text":"<p>This website http://scottbryce.com/parachute/spherical_parachute.html, by providing data, gives us a graphic file to print and cut out the gores on paper.</p>"},{"location":"Parachute/radius/","title":"Radio Calculation","text":"<p>The aim of this section is to learn how to calculate the radius of the hemisphere that forms our parachute.</p> <p>Calculation data: Mass between 300 and 350 g, recommended flight time maximum 120 s, descent speed between 6 and 12 m/s (recommended between 8 and 11 m/s).</p> <p>To calculate, we will have to make the drag force of the parachute (Fr) equal to the weight that moves the parachute towards the ground (Fg=mg). When they are equal, the acceleration stops and the speed becomes constant, which is the rate of descent.</p> <p>\\(\\sum F = m \\cdot a; F_r - F_g = m \\cdot a (a=0; V = const)\\rightarrow F_r = F_g\\)</p> <p>Being \\(F_g = m_{cansat} \\cdot g\\) (weight of the cansat) and \\(F_r = \\frac{1}{2} \\cdot r \\cdot C_d \\cdot A \\cdot V^2\\) (drag force of the parachute) where:</p> <ul> <li>r = density of air (1.22 kg/m3)</li> <li>Cd = coefficient of aerodynamic drag in hemispherical parachutes, its value is 0.62</li> <li>A = surface of the parachute (in our case hemisphere)</li> <li>V = descent speed</li> </ul> <p>I can clear the area of the parachute by equating the two expressions:</p> <p>\\(m_{cansat} \\cdot g =\\frac{1}{2}\\cdot r \\cdot C_d \\cdot A \\cdot V^2 \\rightarrow A = \\frac{2 \\cdot m_{cansat} \\cdot g}{r \\cdot C_d \\cdot V^2}\\)</p> <p>such as \\(A = 2 \\cdot \\pi \\cdot R^2\\) we can equal:</p> <p>\\(2 \\cdot \\pi \\cdot R^2 = \\frac{2 \\cdot m_{cansat} \\cdot g}{r \\cdot C_d \\cdot V^2}\\) and all that remains is to clear the parachute radius,</p> <p>\\(R = \\sqrt{\\frac{2 \\cdot m_{cansat} \\cdot g}{2 \\cdot \\pi \\cdot r \\cdot C_d \\cdot V^2}}\\)</p> <p>To determine the fall speed and if the speed is constant (no acceleration), we have that \\(velocity = space / time\\), the rocket reaches 1000 m in height (space to travel) and the time we said 120 s, therefore ...., we already have the V. We also have the mass of our cansat (from 300g to 350g), so we have everything to calculate our parachute radius or diameter.</p>"},{"location":"Parachute/radius/#task-calculate-your-parachute-radius","title":"Task: Calculate your parachute radius","text":"<p>Calculate the radius or diameter with the real data of your cansat, remember that you have to know mass and fall speed.</p> My solution <p>As starting data I will have a m=350g=0,35Kg, and a fall velocity of \\(velocity = \\frac{space}{time}\\) with a spacing (height) of 1000 m and a flight time of 120 seconds, we are left with \\(velocity = \\frac{1000 m}{120 s} = 8.33 \\frac{m}{s}\\). Substituting the values into the radius equation we have:</p> <p>\\(R = \\sqrt{\\frac{2 \\cdot m_{cansat} \\cdot g}{2 \\cdot \\pi \\cdot r \\cdot C_d \\cdot V^2}} = \\sqrt{\\frac{2 \\times 0.35 kg \\times 9.81 \\frac{m}{s^2}}{2 \\pi \\times 1.22 \\frac{kg}{m^2} \\times 0.62 \\times 8.33^2 \\frac{m}{s^2}}} = 0.144 m = 144 mm\\)</p>"},{"location":"ayuda/ayuda/","title":"Ayuda","text":"<p>Esta es una secci\u00f3n de ayuda para iniciar una web con la plantilla y para cuando tengas problemas escribiendola. \u00dasalo como consulta mientras la est\u00e1s redactando (la web), pero recuerda comentarlo en el <code>mkdocs.yml</code> para que no aparezca en tu web.</p>"},{"location":"ayuda/ayuda/#resumen-del-proceso-a-seguir","title":"Resumen del proceso a seguir","text":"<p>Crear repositorio en la nube     \u2022 Le ponemos nombre y descripci\u00f3n     \u2022 Le a\u00f1adimos README.md.     \u2022 Le a\u00f1adimos Licencia MIT     \u2022 Le a\u00f1adimos .gitignore     \u2022 Arreglamos README.md y ponemos Acceso a contenidos con la direcci\u00f3n web que nos da en Settings \u2192 Pages     \u2022 Le a\u00f1adimos rama gh-pages Nos dirigimos al directorio en el que vamos a trabajar y hacemos      \u2022 $ git clone \u2026 (a\u00f1adimos la direcci\u00f3n https que obtenemos de Code) Copiamos de Plantilla:     \u2022 Carpeta docs     \u2022 mkdocs.yml     \u2022 Pipfile     \u2022 .gitignore     \u2022 requirements.txt     \u2022 LICENSE     \u2022 guia</p> <p>Tenemos que preparar el equipo para trabajar con la plantilla. Nos situamos en la carpeta con la que vamos a trabajar, abrimos una terminal y creamos el entorno virtual e instalamos todas las dependencias con:</p> <pre><code>\u2022 Creamos el entorno virtual: python3 -m venv env\n\u2022 Activamos el entorno virtual: source env/bin/activate\n\u2022 Instalamos las dependencias: pip install -r requirements.txt\n</code></pre> <p>Abrimos VSCode y configuramos mkdocs.yml para tener un \u00edndice operativo comentando todo lo pendiente.</p> <p>Trabajamos el directorio Miscelanea y sus archivos para dejarlo todo funcionando.</p> <pre><code>\u2022 Activar el entorno virtual si no est\u00e1 activado: source env/bin/activate\n\u2022 Correr el servidor: mkdocs serve. Si se genera el error -- ERROR   -  Config value 'plugins': The \"glightbox\" plugin is not installed \u2013 procedemos a instalar el plugin con \u2018pip install mkdocs-glightbox\u2019.\n</code></pre> <p>Cerrar Server para hacer el primer despliegue y comprobar que todo es correcto con: pipenv run mkdocs gh-deploy</p>"},{"location":"ayuda/ayuda/#aspecto-final-del-navegador","title":"Aspecto final del navegador","text":"<p><code>mkdocs.yml</code> -&gt; Debe quedar el punto 4 m\u00e1s o menos as\u00ed</p> <pre><code>...\n\n# 4. Navegaci\u00f3n\nnav:\n  - Manual de Sanp\u00a1:\n    - 1. Bloques, Scripts y Sprites: index.md\n    - 1.1. Sprites y paralelismo: 1/1_1.md\n    - 1.2. Anidamiento de Sprites. Anclajes y Partes: 1/1_2.md\n    - 1.3. Bloques informadores y expresiones: 1/1_3.md\n    - 1.4. Predicados y evaluaci\u00f3n condicional: 1/1_4.md\n    - 1.5. Variables: 1/1_5.md\n  - 2. Salvando y cargando proyectos y media:\n    ...\n\n#- Ayuda:\n    #- Chuleta: /ayuda/ayuda.md\n    #- Chuleta de Markdown: ayuda/markdown.md\n    #- Chuleta de Material Design: ayuda/material.md\n\n - Miscelanea:\n    - Autor: Miscelanea/about.md \n    - Licencias: Miscelanea/lic.md\n    - Webgrafia/Bibliograf\u00eda: Miscelanea/webgrafia.md\n    - Software utilizado: Miscelanea/soft.md\n\n...\n</code></pre> <p>Tienes una ayuda b\u00e1sica para desenvolverte con Markdown. Y otra para poder sacarle m\u00e1s partido al tema Material Design:</p> <ol> <li>Escribir Markdown</li> <li>Sacarle jugo al tema Material Design</li> </ol>"},{"location":"ayuda/ayuda/#guia-con-mi-formato-y-otras-cosas","title":"Guia con mi formato y otras cosas","text":"<p>Establecer color, tama\u00f1o y negrita con html:</p> <p>aa <p>Colores para los tres primeros niveles del \u00edndice:</p>"},{"location":"ayuda/ayuda/#nivel-indice-1","title":"Nivel indice 1","text":""},{"location":"ayuda/ayuda/#nivel-indice-2","title":"Nivel indice 2","text":""},{"location":"ayuda/ayuda/#nivel-indice-3","title":"Nivel indice 3","text":"<p>Idea base para im\u00e1gnes y gif animados:</p> <p> <p> aa</p> <p></p> <p>Idea b\u00e1sica para im\u00e1genes y gif mas acceso a programa, enlace, etc:</p> <p> <p> aa Aqui ponemos acceso a programa, enlace u otra cosa</p> <p></p> <p>Como crear un \u00edndice de enlaces internos con html</p> <p></p> <p>Entrada 1 Entrada 2 Entrada 3 Entrada 4</p> <p>[Volver](#item00 </p>"},{"location":"ayuda/markdown/","title":"Chuleta de Markdown","text":"<p>Esta es solo una chuleta de Markdown b\u00e1sico. En esta web tienes una referencia muy buena -&gt; Web de Markdown.</p> <p>Para escribir Markdown se recomienda usar como editor VSCode o VSCodium con las extensiones:</p> <ul> <li>Markdown All in One</li> <li>Markdownlint</li> </ul>"},{"location":"ayuda/markdown/#titulos","title":"T\u00edtulos","text":""},{"location":"ayuda/markdown/#esto-es-un-titulo-1-usar-solo-al-principio-del-fichero","title":"Esto es un t\u00edtulo 1 -&gt; Usar solo al principio del fichero","text":""},{"location":"ayuda/markdown/#esto-es-un-titulo-2-usar-para-dividir-en-secciones","title":"Esto es un t\u00edtulo 2 -&gt; Usar para dividir en secciones","text":""},{"location":"ayuda/markdown/#esto-es-un-titulo-3-usar-para-dividir-en-subsecciones","title":"Esto es un t\u00edtulo 3 -&gt; Usar para dividir en subsecciones","text":""},{"location":"ayuda/markdown/#esto-es-un-titulo-4-no-recomendado-su-uso","title":"Esto es un t\u00edtulo 4 -&gt; No recomendado su uso","text":""},{"location":"ayuda/markdown/#esto-es-un-titulo-5-no-recomendado-su-uso","title":"Esto es un t\u00edtulo 5 -&gt; No recomendado su uso","text":""},{"location":"ayuda/markdown/#esto-es-un-titulo-6-no-recomendado-su-uso","title":"Esto es un t\u00edtulo 6 -&gt; No recomendado su uso","text":""},{"location":"ayuda/markdown/#textos","title":"Textos","text":"<p>Texto en negrita. Texto en cursiva.  </p> <p>Para poner un salto de linea tienes que poner dos espacios en blanco despu\u00e9s del punto. Esta l\u00ednea est\u00e1 debajo. Pero esta sale seguido.</p> <p>O debes de poner una l\u00ednea vac\u00eda entre medias.</p>"},{"location":"ayuda/markdown/#enlaces","title":"Enlaces","text":"<p>As\u00ed se pone un enlace a una p\u00e1gina de Internet.</p> <p>As\u00ed se pone un enlace a una p\u00e1gina del propio taller.</p>"},{"location":"ayuda/markdown/#imagenes","title":"Im\u00e1genes","text":"<p>As\u00ed se pone una imagen desde Internet</p> <p></p> <p>Y as\u00ed se pone una imagen desde el propio taller</p> <p></p>"},{"location":"ayuda/markdown/#listas","title":"Listas","text":"<p>Listas sin orden con <code>*</code>, ejemplo:</p> <ul> <li>Esto es una lista</li> <li>Lista sin orden.</li> </ul> <p>Listas ordenadas con <code>1.</code>, ejemplo:</p> <ol> <li>Esto es una</li> <li>Lista ordenada</li> </ol>"},{"location":"ayuda/markdown/#citas","title":"Citas","text":"<p>Si quieres poner una cita tienes que usar <code>&gt;</code> delante del texto, ejemplo:</p> <p>Esto es una cita</p> <p>Esto es una cita anidada</p> <p>Esto es una cita doblemente anidada</p>"},{"location":"ayuda/markdown/#regla-horizontal","title":"Regla horizontal","text":"<p>Se hace para poner una l\u00ednea que divisa visualmente una secci\u00f3n de otra.</p> <p>Aqu\u00ed hay una.</p>"},{"location":"ayuda/markdown/#tablas","title":"Tablas","text":"<p>En este ejemplo tienes una tabla con 3 columnas:</p> <ul> <li>La primera tiene el texto fijado a la izquierda.</li> <li>La segunda tiene el texto fijado al centro.</li> <li>La tercera tiene el texto fijado a la derecha.</li> </ul> Texto a la izquierda Texto en el centro Texto en la derecha En un lugar de la mancha, de cuyo nombre no quiero acordarme, no ha mucho tiempo que vivia un hidalgo de los de lanza en astillero, adarga antigua, roc\u00edn flaco y galgo corredor..."},{"location":"ayuda/markdown/#lineas-de-codigo","title":"L\u00edneas de c\u00f3digo","text":"<p>Para poner c\u00f3digo en l\u00ednea, tienes que ponerlo entre las comillas `.</p> <p>Aqu\u00ed tienes <code>un ejemplo de c\u00f3digo</code> en l\u00ednea.</p> <p>Si quisieras poner un bloque de c\u00f3digo tienes que poner 3 comillas `, debajo el c\u00f3digo, y una \u00faltima l\u00ednea con otras 3 comillas. Puedes incluso espec\u00edficarle el lenguaje del c\u00f3digo para que te lo coloree. Ah\u00ed va un ejemplo en Python:</p> <pre><code>import antigravity\n\nprint('Hola mundo')\n</code></pre>"},{"location":"ayuda/material/","title":"Material Design","text":"<p>Esta chuleta es un copia-pega modificado de esta p\u00e1gina. B\u00e1sicamente es un Markdown espec\u00edfico para poder ser usado con el tema Material Design y sacarle m\u00e1s partido.</p>"},{"location":"ayuda/material/#enlaces","title":"Enlaces","text":"<p>Existe la posibilidad de utilizar referencias a enlaces que se definen posteriormente. En ese caso unicamente incluimos el n\u00famero de enlace. M\u00e1s adelante es necesario definir el enlace que corresponde con cada n\u00famero y, opcionalmente, un texto descriptivo.</p> <pre><code>:::markdown\nPodemos comprar un ordenador (Dell)[1] o (Apple)[2].\n\n[1]: http://dell.com/   \"Comprar en Dell\"\n[2]: http://apple.com/  \"Comprar en Apple\"\n</code></pre> <p>Podemos comprar un ordenador Dell o Apple.</p>"},{"location":"ayuda/material/#imagenes","title":"Imagenes","text":"<p>Tambi\u00e9n es posible utilizar referencias que es necesario definir posteriormente.</p> <pre><code>:::markdown\n![texto alternativo][id]\n\n[id]: /img/md-logo.png \"Titulo opcional\"\n</code></pre> <p></p>"},{"location":"ayuda/material/#secuencias-de-escape","title":"Secuencias de escape","text":"<p>Puede ocurrir que alguno de los caracteres especiales utilizados en markdown aparezcan de forma fortuita en el texto y originen efectos no deseados. Para evitarlo podemos utilizar las secuencias de escape para especificar que deseamos utilizar el caracter como texto sin que tenga ning\u00fan efecto colateral. Podemos utilizar el caracter '\\' junto con cualquiera de los siguientes para crear una secuencia de escape.</p> <pre><code>\\ backslash\n` backtick\n* asterisco\n_ underscore\n{} curly braces\n[] square brackets\n() parentheses\n# hash mark\n+ plus sign\n- minus sign (hyphen)\n. dot\n! exclamation mark\n</code></pre>"},{"location":"ayuda/material/#codigo","title":"C\u00f3digo","text":"<p>Para marcar texto como c\u00f3digo es necesario indentar cada l\u00ednea del bloque con cuatro espacios o una tabulaci\u00f3n. Si el c\u00f3digo va embebido en un p\u00e1rrafo, es neceario rodearlo por comillas simples invertidas. Consultar la secci\u00f3n de CodeHilite y de InlineHilite para funcionalidades extendidas.</p>"},{"location":"ayuda/material/#extensiones","title":"Extensiones","text":""},{"location":"ayuda/material/#admonition","title":"Admonition","text":"<p>Extensi\u00f3n incluida en la librer\u00eda est\u00e1ndar de Markdown que permite incluir contenido adicional en cajas de color con un t\u00edtulo y un icono. Por ejemplo para res\u00famenes, notas, consejos o avisos.</p> <pre><code>!!! note\n    Esto es un ejemplo de nota (note, seealso).\n</code></pre> <p>Note</p> <p>Esto es un ejemplo de nota (note, seealso).</p> <pre><code>!!! note \"Esta es una nota con t\u00edtulo\"\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n    Nulla et euismod nulla. Curabitur feugiat, tortor non\n    consequat finibus, justo purus auctor massa, nec semper\n    lorem quam in massa.\n</code></pre> <p>Esta es una nota con t\u00edtulo</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>!!! note \"\"\n    Esta nota va sin t\u00edtulo.\n</code></pre> <p>Esta nota va sin t\u00edtulo.</p> <p>En vez de note es posible utilizar las siguientes etiquetas: summary, info, tip, success, question, warning, failure, danger, bug y quote.</p> <p>Summary</p> <p>Esto es un ejemplo de sumario (summary, tldr).</p> <p>Info</p> <p>Esto es un ejemplo de bloque informativo (info, todo).</p> <p>Tip</p> <p>Esto es un ejemplo de consejo o truco (tip, hint, important).</p> <p>Success</p> <p>Esto es un ejemplo de bloque de \u00e9xito (success, check, done).</p> <p>Question</p> <p>Esto es un ejemplo de pregunta (question, help, faq).</p> <p>Warning</p> <p>Esto es un ejemplo de precauci\u00f3n (warning, caution, attention).</p> <p>Failure</p> <p>Esto es un ejemplo de fallo (failure, fail, missing).</p> <p>Danger</p> <p>Esto es un ejemplo de peligro (danger, error).</p> <p>Bug</p> <p>Esto es un ejemplo de error (bug).</p> <p>Quote</p> <p>Esto es un ejemplo de cita (quote, cite).</p>"},{"location":"ayuda/material/#details","title":"Details","text":"<p>Para crear bloques colapsables que puedan ocultar su contenido.</p> <p>Ejemplo: <pre><code>??? \"Bloque cerrado. Abreme !!!\"\n    Ahora lo has abierto.\n</code></pre> Resultado:</p> Bloque cerrado. Abreme !!! <p>Ahora lo has abierto.</p> <p>Ejemplo: <pre><code>???+ \"Bloque abierto inicialmente\"\n\n    ??? \"Bloque dentro de otro bloque\"\n        Algo de contenido.\n</code></pre> Resultado:</p> Bloque abierto inicialmente Bloque dentro de otro bloque <p>Algo de contenido.</p> <p>Ejemplo: <pre><code>??? danger \"Bloque con tema de peligro\"\n    Algo de contenido.\n</code></pre> Resultado:</p> Bloque con tema de peligro <p>Algo de contenido.</p> Bloque con tema de precauci\u00f3n <p>Algo de contenido.</p> Bloque con tema de \u00e9xito <p>Algo de contenido.</p>"},{"location":"ayuda/material/#codehilite","title":"CodeHilite","text":"<p>Extensi\u00f3n incluida en la librer\u00eda est\u00e1ndar de Markdown que permite resaltar la sintaxis de los bloques de c\u00f3digo. Como lenguajes soportados est\u00e1n entre otros: markdown, python, c, cpp, csharp, html, javascript, JSON, XML.</p> <p>Ejemplo utilizando comillas simples.</p> <pre><code>``` python\nimport tensorflow as tf\n```\n</code></pre> <p>Resultado:</p> <pre><code>import tensorflow as tf\n</code></pre> <p>Ejemplo utilizando bloque tabulado con cuatro espacios:</p> <pre><code>    :::python\n    \"\"\" Bubble sort \"\"\"\n    def bubble_sort(items):\n        for i in range(len(items)):\n            for j in range(len(items) - 1 - i):\n                if items[j] &gt; items[j + 1]:\n                    items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <p>Resultado:</p> <pre><code>:::python\n\"\"\" Bubble sort \"\"\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <p>Ejemplo utilizando bloque tabulado y n\u00fameros de l\u00ednea:</p> <pre><code>    #!python\n    \"\"\" Bubble sort \"\"\"\n    def bubble_sort(items):\n        for i in range(len(items)):\n            for j in range(len(items) - 1 - i):\n                if items[j] &gt; items[j + 1]:\n                    items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <p>Resultado:</p> <pre><code>#!python\n\"\"\" Bubble sort \"\"\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <p>Es posible resaltar l\u00edneas concretas de c\u00f3digo con hl_lines.</p> <pre><code>    #!python hl_lines=\"3 4\"\n</code></pre> <p>Resultado:</p> <pre><code>#!python hl_lines=\"3 4\"\n\"\"\" Bubble sort \"\"\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"ayuda/material/#inlinehilite","title":"InlineHilite","text":"<p>Permite embeber c\u00f3digo en el texto mediante <code>#!languaje code</code> o bien <code>:::languaje code</code> entre comillas simples inversas.</p> <p>Ejemplo: <pre><code>Aqui se presenta este c\u00f3digo `#!c #include &lt;stdio.h&gt;` embebido en el texto.\n</code></pre> Resultado:</p> <p>Aqui se presenta este c\u00f3digo <code>#include &lt;stdio.h&gt;</code> embebido en el texto.</p> <p>Ejemplo: <pre><code>Aqui se presenta este otro c\u00f3digo `:::c #include &lt;stdlib.h&gt;` embebido en el texto.\n</code></pre> Resultado:</p> <p>Aqui se presenta este otro c\u00f3digo <code>#include &lt;stdlib.h&gt;</code> embebido en el texto.</p> <p>Ejemplo: <pre><code>C\u00f3digo javascript: `#!js function pad(v){return ('0'+v).split('').reverse().splice(0,2).reverse().join('')}`.\n</code></pre> Resultado:</p> <p>C\u00f3digo javascript: <code>function pad(v){return ('0'+v).split('').reverse().splice(0,2).reverse().join('')}</code>.</p>"},{"location":"ayuda/material/#mark","title":"Mark","text":"<p>Permite marcar texto en amarillo fosforito.</p> <p>La anterior frase se ha generado as\u00ed: <pre><code>Permite marcar texto en ==amarillo fosforito==.\n</code></pre></p>"},{"location":"ayuda/material/#footnotes","title":"Footnotes","text":"<p>Otra extensi\u00f3n de la libreria est\u00e1ndar para incluir notas al pie de p\u00e1gina. Se inserta una referencia en el texto, la cual puede ser definida en cualquier parte del documento. La definici\u00f3n aparecer\u00e1 en el pie de p\u00e1gina. La referencia consiste en un sombrerete seguido de un identificador num\u00e9rico [1, 2, 3, ...] o bien de nombres [Cuartas et al. 2012].</p> <p>Ejemplo:</p> <pre><code>Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2]\n</code></pre> <p>Resultado:</p> <p>Lorem ipsum<sup>1</sup> dolor sit amet, consectetur adipiscing elit.<sup>2</sup></p> <p>La definici\u00f3n de los contenidos de la nota al pie puede realizarse en una \u00fanica l\u00ednea si el texto es corto:</p> <pre><code>[^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n</code></pre> <p>o bien en un bloque de texto indentado cuatro espacios, que comienze en la siguiente l\u00ednea de la etiqueta, si el texto es largo.</p> <pre><code>[^2]:\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre>"},{"location":"ayuda/material/#arithmatex-mathjax","title":"Arithmatex MathJax","text":"<p>Basado en MathJax. Permite introducir equaciones escritas en TeX dentro de bloques o en l\u00ednea con el texto. Ver este hilo para una r\u00e1pida referencia sobre la sintaxis TeX.</p> <p>Ejemplo: <pre><code>$$\\frac{n!}{k!(n-k)!} = \\binom{n}{k}$$\n\n$$\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}$$\n</code></pre> Resultado:</p> \\[\\frac{n!}{k!(n-k)!} = \\binom{n}{k}\\] \\[\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}\\] <p>Ejemplo: <pre><code>Lorem ipsum dolor sit amet: $p(x|y) = \\frac{p(y|x)p(x)}{p(y)}$\n</code></pre></p> <p>Resultado:</p> <p>Lorem ipsum dolor sit amet: \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\)</p>"},{"location":"ayuda/material/#letras-griegas","title":"Letras griegas","text":"<p><code>$\\alpha, \\beta, ..., \\omega$</code></p> <p>\\(\\alpha, \\beta, ..., \\omega\\)</p> <p><code>$\\Gamma, \\Delta, ..., \\Omega$</code></p> <p>\\(\\Gamma, \\Delta, ..., \\Omega\\)</p>"},{"location":"ayuda/material/#superindices-y-subindices","title":"Superindices y subindices","text":"<p><code>$x_i^2  \\log_2 x$</code></p> <p>\\(x_i^2  \\log_2 x\\)</p>"},{"location":"ayuda/material/#grupos","title":"Grupos","text":"<p>Super\u00edndices, sub\u00edndices y otras operaciones aplican solamente al siguiente \"grupo\". Un \"grupo\" es un \u00fanico s\u00edmbolo o un cualquier f\u00f3rmula ubicada entre llaves {...}</p> <p><code>$10^10$</code></p> <p>\\(10^10\\)</p> <p><code>$10^{10}$</code></p> <p>\\(10^{10}\\)</p> <p><code>${x^y}^z$</code></p> <p>\\({x^y}^z\\)</p> <ol> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\u00a0\u21a9</p> </li> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.\u00a0\u21a9</p> </li> </ol>"}]}